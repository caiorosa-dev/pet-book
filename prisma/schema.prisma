generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  fullName String @map("full_name")
  userName String @unique @map("username")
  email    String @unique
  phone    String @unique

  emailVerified Boolean  @default(false) @map("email_verified")
  image         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  posts    Post[]
  Comment  Comment[]
  Like     Like[]

  @@map("users")
}

model Session {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  token     String   @unique @map("session_token")
  expiresAt DateTime @map("expires_at")

  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  userId                String    @map("user_id")
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  accessToken           String?   @map("access_token") @db.Text
  refreshToken          String?   @map("refresh_token") @db.Text
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  idToken               String?   @map("id_token") @db.Text
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("verifications")
}

model Post {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  petId            String?  @map("pet_id")
  lastSeenDate     DateTime @map("last_seen_date")
  lastSeenLocation String   @map("last_seen_location")
  photos           String[] @map("photos")
  type             String   @map("type")
  animalSpecies    String   @map("animal_species")
  animalBreed      String   @map("animal_breed")
  petDescription   String   @map("pet_description")

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet      Pet?      @relation(fields: [petId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
}

model Pet {
  id              String   @id @default(uuid())
  name            String
  photos          String[]
  species         String
  breed           String
  characteristics String
  posts           Post[]
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  authorId  String
  content   String
  timestamp DateTime @default(now())

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  timestamp DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
